
Box dimensions
width, height
/*  div.box {
 height: 300px;
 width: 300px;
 background-color: #bbbbaa;}
 p {
 height: 75%; /* percentage is relative to browser window or the box in which this box is encased. */
 width: 75%;
 background-color: #0088dd;}

 <div>
 <p>The Moog company pioneered the commercial
 manufacture of modular voltage-controlled 
 analog synthesizer systems in the early 
 1950s.</p>
 </div>
*/

 min-width, max-width:

 <tr>
 <td><img src="images/rhodes.jpg" width="200" 
height="100" alt="Fender Rhodes" /></td>
 <td class="description">The Rhodes piano is an 
electro-mechanical piano, invented by Harold 
Rhodes during the fifties and later 
manufactured in a number of models ...</td>
 <td>$1400</td>
 </tr>

td.description {
 min-width: 450px;
 max-width: 650px;
 text-align: left;
 padding: 5px;
 margin: 0px;}

These are very helpful properties to ensure that the content of pages are legible (especially on the smaller screens of handheld devices). 
For example, you can use the max-width property to ensure that lines of text do not appear too wide within a big browser window 
and you can use the min-width property to make sure that they do not appear too narrow.

min-height, max-height:

 h2, p {
 width: 400px;
 font-size: 90%;
 line-height: 1.2em;}
 h2 {
 color: #0088dd;
 border-bottom: 1px solid #0088dd;}
 p {
 min-height: 10px;
 max-height: 30px;}

 when the content in the box is not big enough tp hold the content, the content expands outside.

overflow:
The overflow property tells the browser what to do if the content contained within a box is larger than the box itself. 
It can have one of the two values:
hidden: hides the extra content that does not fit in the box
scroll: adds a scroll bar to the box 

p.one {
 overflow: hidden;}
 p.two {
 overflow: scroll;}

 Border width
 
 border-width:
  p.one {
 border-width: 2px;}
 p.two {
 border-width: thick;}
 p.three {
 border-width: 1px 4px 12px 4px;}

 The value of this 
 property can either be given 
 in pixels or using one of the 
 following values:
 thin
 medium
 thick

(You cannot use percentages 
with this property.)

You can control the individual 
size of borders using four 
separate properties:
 border-top-width
 border-right-width
 border-bottom-width
 border-left-width
 
You can also specify different widths for the four border values in one property, like so:
border-width: 2px 1px 1px 
2px;

The values here appear in clockwise order: top, right, 
bottom, left.

border-style:

 p.one {border-style: solid;}
 p.two {border-style: dotted;}
 p.three {border-style: dashed;}
 p.four {border-style: double;}
 p.five {border-style: groove;}
 p.six {border-style: ridge;}
 p.seven {border-style: inset;}
 p.eight {border-style: outset;}

hidden / none no border is 
shown

You can individually change the styles of different borders using:
 border-top-style
 border-left-style
 border-right-style
 border-bottom-style

 border-color:

 p.one {
 border-color: #0088dd;}
 p.two {
 border-color: #bbbbaa #111111 #ee3e80 #0088dd;}

  It is possible to individually control the colors of the borders on different sides of a box using:
 border-top-color
 border-right-color
 border-bottom-color
 border-left-color

 Shortcut for border:

 p {
 width: 250px;
 border: 3px dotted #0088dd;

 padding:

 The padding property allows 
 you to specify how much space 
 should appear between the 
 content of an element and its 
 border. 

 p {
 width: 275px;
 border: 2px solid #0088dd;}
 p.example {
 padding: 10px;} 

 You can specify different values 
for each side of a box using:
 padding-top
 padding-right
 padding-bottom
 padding-left

 Or you can use a shorthand 
(where the values are in 
clockwise order: top, right, 
bottom, left):
 padding: 10px 5px 3px 1px;

 margin:
 The margin property controls 
the gap between boxes.

 You can specify values for each 
side of a box using:
 margin-top
 margin-right
 margin-bottom
 margin-left

 You can also use the shorthand 
(where the values are in 
clockwise order: top, right, 
bottom, left):
 margin: 1px 2px 3px 4px;

 p {
 width: 200px;
 border: 2px solid #0088dd;
 padding: 10px;}
 p.example {
 margin: 20px;}

 Note: The value of the margin property is not inherited by child elements in the same way that the color value of the font-family property is, so you need to specify the margin for every element that needs to use it.

 Centering Content:
 If you want to center a box on the page (or center it inside the element that it sits in), you can set the left-margin and right-margin to auto

 In order to center a box on the page, you need to set a width for the box (otherwise it will take up the full width of the page).

Once you have specified the width of the box, setting the left and right margins to auto will make the browser put an equal gap on each side of the box. This centers the box on the page (or within the element that the box sits inside).

body {
 text-align: center;}
 p {
 width: 300px;
 padding: 50px;
 border: 20px solid #0088dd;}
 p.example {
 margin: 10px auto 10px auto;
 text-align: left;}

 Change Inline/block display
 
 inline
 This causes a block-level element to act like an inline element.

 block
This causes an inline element to act like a block-level element.

inline-block
This causes a block-level element to flow like an inline 
element, while retaining other features of a block-level element.

none
This hides an element from the page. In this case, the element acts as though it is not on the page at all (although a user could still see the content of the box if they used the view source option in their browser).
<ul>
 <li>Home</li>
 <li>Products</li>
 <li class="coming-soon">Services</li>
 <li>About</li>
 <li>Contact</li>
 </ul>

 li {
 display: inline; 
margin-right: 10px;}
 li.coming-soon {
 display: none;}

 Hiding Boxes:
  <ul>
  <li>Home</li>
  <li>Products</li>
  <li class="coming-soon">Services</li>
  <li>About</li>
  <li>Contact</li>
 </ul>
 
 li {
 display: inline; 
margin-right: 10px;}
 li.coming-soon {
 visibility: hidden;}

 hidden
 This hides the element.
 
 visible
 
This shows the element.

If the visibility of an element is set to hidden, a blank space will appear in its place. If you do not want a blank space to appear, then you should use the display property with a value of none instead

CSS3: Border Images

p.one { -moz-border-image: url("images/dots.gif") 
11 11 11 11 stretch; -webkit-border-image: url("images/dots.gif") 
11 11 11 11 stretch;
 border-image: url("images/dots.gif") 
11 11 11 11 stretch;}
 p.two {-moz-border-image: url("images/dots.gif") 
11 11 11 11 round; -webkit-border-image: url("images/dots.gif") 
11 11 11 11 round; 
border-image: url("images/dots.gif") 
11 11 11 11 round;}

 The border-image property applies an image to the border of any box. It takes a background image and slices it into nine pieces.

This property requires three 
pieces of information:
 1: The URL of the image 
2: Where to slice the image
 3: What to do with the straight 
edges; the possible values are:
 stretch stretches the image
 repeat repeats the image
 round like repeat but if the 
tiles do not fit exactly, scales 
the tile image so they will

Note:
 The -moz-border-image 
and -webkit-border-image 
properties are not in the CSS 
specification but help earlier 
versions of Chrome, Firefox, and 
Safari display this effect.

The box must also have a border 
width for the image to be shown

CSS3: Box Shadows
 p.one {  -moz-box-shadow: -5px -5px #777777;  -webkit-box-shadow: -5px -5px #777777;  
box-shadow: -5px -5px #777777;} 
p.two {-moz-box-shadow: 5px 5px 5px #777777;  -webkit-box-shadow: 5px 5px 5px #777777; 
box-shadow: 5px 5px 5px #777777;}   
p.three {-moz-box-shadow: 5px 5px 5px 5px #777777;  -webkit-box-shadow: 5px 5px 5px 5px #777777; 
box-shadow: 5px 5px 5px 5px #777777;}  
p.four {-moz-box-shadow: 0 0 10px #777777;  -webkit-box-shadow: 0 0 10px #777777; 
box-shadow: 0 0 10px #777777;} 
p.five {-moz-box-shadow: inset 0 0 10px #777777;  -webkit-box-shadow: inset 0 0 10px #777777; 
box-shadow: inset 0 0 10px #777777;} 


 Horizontal Offset
 Negative values position the 
shadow to the left of the box.
 
 Vertical Offset:
 Negative values position the shadow to the top of the box.
 
 Blur Distance:
 If omitted, the shadow is a solid line like a border.
 
 Spread of Shadow:
If used, a positive value will cause the shadow to expand in all directions, and a negative value will make it contract.
 
 Inset:
The inset keyword can also be used before these values to create an inner-shadow.

border-radius:

p {
 border: 5px solid #cccccc;
 padding: 20px;
 width: 275px;
 text-align: center;
 border-radius: 10px;-moz-border-radius: 10px;-webkit-border-radius: 10px;}

 You can specify individual values 
for each corner of a box using:
 border-top-right-radius
 border-bottom-right-radius
 border-bottom-left-radius
 border-top-left-radius
 
You can also use a shorthand of these four properties (in clockwise order: top, right, bottom, left). 
For example:
 border-radius: 5px, 10px, 5px, 10px;
 

Elliptical Shapes:
border-radius

 p.one {
 border-top-left-radius: 80px 50px;-moz-border-radius-top-left: 80px 50px;-webkit-border-radius-top-left: 80px 50px;}
 p.two {
 border-radius: 1em 4em 1em 4em / 2em 1em 2em 1em;-moz-border-radius: 1em 4em 1em 4em
 / 2em 1em 2em 1em;-webkit-border-radius:  1em 4em 1em 4em
 / 2em 1em 2em 1em;}
 p.three {
 padding: 0px;
 border-radius: 100px;-moz-border-radius: 100px;-webkit-border-radius: 100px;}


 For example, this will create a radius that is wider than it is tall:
 border-radius: 80px 50px


You can target just one corner using the individual properties 
for that corner:
 border-top-left-radius: 
80px 50px;
 
There is also a shorthand for targetting all four corners at once; first you specify the four horizontal values, then the four vertical values, as shown in the second shape on the left.

You can even create a circle by taking a square box and making the border-radius the same height as the square.

Example:
 <!DOCTYPE html>
 <html>
 <head>
  <title>Boxes</title>
  <style type="text/css">
   body {
    font-size: 80%;
    font-family: "Courier New", Courier, monospace;
    letter-spacing: 0.15em; 
    background-color: #efefef;}
   #page {
    max-width: 940px;
    min-width: 720px;
    margin: 10px auto 10px auto;
    padding: 20px;
    border: 4px double #000;
    background-color: #ffffff;}
   #logo {
    width: 150px;
    margin: 10px auto 25px auto;}
   ul {
    width: 570px;
    padding: 15px;
    margin: 0px auto 0px auto;
    border-top: 2px solid #000;
    border-bottom: 1px solid #000;
    text-align: center;}
   li {
    display: inline;
    margin: 0px 3px;}
   p {
    text-align: center;
    width: 600px; 
    margin: 20px auto 20px auto; 
    font-weight: normal;}

      color: #000000;
    text-transform: uppercase;
    text-decoration: none;
    padding: 6px 18px 5px 18px;}
   a:hover, a.on {
    color: #cc3333;
    background-color: #ffffff;}
  </style>
 </head>
 <body>
  <div id="page">
   <div id="logo">
    <img src="images/logo.gif" alt="The Analog Specialists" />
   </div>
   <ul id="navigation">
    <li><a href="#" class="on">Home</a></li>
    <li><a href="#">For Sale</a></li>
    <li><a href="#">Repairs</a></li>
    <li><a href="#">About</a></li>
    <li><a href="#">Contact</a></li>
   </ul>
   <p>
    <img src="images/keys.jpg" alt="Fender Rhodes, Hohner Clavinet, 
       and Wurlitzer EP200" />
   </p>
   <p>
    We specialise in the sales and repair of classic keyboards, in particular 
    the Fender Rhodes, Wurlitzer EP200, and Hohner Clavinet.
   </p>
  </div>
 </body>
 </html>

